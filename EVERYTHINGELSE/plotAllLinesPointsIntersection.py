import time
start_time = time.time()
import numpy as np
import matplotlib.pyplot as plt
from matplotlib.pyplot import figure
from math import *
import cv2
import statistics

plotting = True

# Calculates the line of best fit for the given points
def lineOfBestFit(array):
    """Returns with the slope and y-intercept of the each of the 4 lines of best fit 
    for the given array of points. Lines go from left to right number 0 to 3.
    """
    
    x_points_0 = []
    y_points_0 = []
    x_points_1 = []
    y_points_1 = []
    x_points_2 = []
    y_points_2 = []
    x_points_3 = []
    y_points_3 = []

    for i in array:
        if i[0][2] == '0':
            x_points_0.append(i[1])
            y_points_0.append(i[2])
        elif i[0][2] == '1':
            x_points_1.append(i[1])
            y_points_1.append(i[2])
        elif i[0][2] == '2':
            x_points_2.append(i[1])
            y_points_2.append(i[2])
        elif i[0][2] == '3':
            x_points_3.append(i[1])
            y_points_3.append(i[2])
    x_0 = np.array(x_points_0)
    y_0 = np.array(y_points_0)
    m_0, b_0 = np.polyfit(x_0, y_0, 1)
    
    x_1 = np.array(x_points_1)
    y_1 = np.array(y_points_1)
    m_1, b_1 = np.polyfit(x_1, y_1, 1)
    
    x_2 = np.array(x_points_2)
    y_2 = np.array(y_points_2)
    m_2, b_2 = np.polyfit(x_2, y_2, 1)
    
    x_3 = np.array(x_points_3)
    y_3 = np.array(y_points_3)
    m_3, b_3 = np.polyfit(x_3, y_3, 1)
    
    
    return x_0, y_0, m_0, b_0, x_1, y_1, m_1, b_1, x_2, y_2, m_2, b_2, x_3, y_3, m_3, b_3

# Image Paht
frameImage = "./DATA/distanceCalculationsImages1/frame36.png"
image = cv2.imread(frameImage)

height, width, _ = image.shape
# Inputted from the file "pointInImage.ipynb"
image_f26_a20_h305 = [
    ['0,0', 810, 1191],
    ['0,1', 1638, 1206],
    ['0,2', 2457, 1224],
    ['0,3', 3276, 1236],
    ['1,0', 1077, 948],
    ['1,1', 1713, 960],
    ['1,2', 2376, 972],
    ['1,3', 3030, 975],
    ['2,0', 1263, 786],
    ['2,1', 1779, 795],
    ['2,2', 2319, 804],
    ['2,3', 2850, 807],
    ['3,0', 1374, 681],
    ['3,1', 1824, 690],
    ['3,2', 2277, 690],
    ['3,3', 2745, 696]] 
image_f26_a20_h305 = [
    ['0,0', 795, 711],
    ['0,1', 1611, 726],
    ['0,2', 2442, 741],
    ['0,3', 3288, 750],
    ['1,0', 1050, 462],
    ['1,1', 1707, 465],
    ['1,2', 2376, 471],
    ['1,3', 3048, 486],
    ['2,0', 1236, 288],
    ['2,1', 1767, 309],
    ['2,2', 2325, 309],
    ['2,3', 2883, 315],
    ['3,0', 1347, 180],
    ['3,1', 1818, 183],
    ['3,2', 2286, 186],
    ['3,3', 2772, 192]]
#Convert to x, y lists
pointList = []
for point in image_f26_a20_h305:
    pointList.append([int(point[1]), int(point[2])])
x, y = np.array(pointList).T

if plotting:
    plt.imshow(image)
    plt.title("Original Points")
    plt.scatter(x, y)

    for xy in zip(x, y):
        plt.annotate('(%s, %s)' % xy, xy=xy, textcoords='offset points', xytext=(0, 10), ha='center', fontsize=10)

x_0, y_0, m_0, b_0, x_1, y_1, m_1, b_1, x_2, y_2, m_2, b_2, x_3, y_3, m_3, b_3 = lineOfBestFit(image_f26_a20_h305)

print(m_0, b_0, m_1, b_1, m_2, b_2, m_3, b_3)

if plotting:
    plt.plot(x_0, y_0, 'o')
    plt.plot(x_0, m_0*x_0 + b_0, label = "y = {:.2f}x + {:.2f}".format(m_0, b_0))
    plt.plot(x_1, y_1, 'o')
    plt.plot(x_1, m_1*x_1 + b_1, label = "y = {:.2f}x + {:.2f}".format(m_1, b_1))
    plt.plot(x_2, y_2, 'o')
    plt.plot(x_2, m_2*x_2 + b_2, label = "y = {:.2f}x + {:.2f}".format(m_2, b_2))
    plt.plot(x_3, y_3, 'o')
    plt.plot(x_3, m_3*x_3 + b_3, label = "y = {:.2f}x + {:.2f}".format(m_3, b_3))
    plt.legend(loc="lower left")

printInfo = True
if printInfo:
    print("Line for number 1")
    print("y = {:.2f}x + {:.2f}".format(m_0, b_0))
    print("Line for number 2")
    print("y = {:.2f}x + {:.2f}".format(m_1, b_1))
    print("Line for number 3")
    print("y = {:.2f}x + {:.2f}".format(m_2, b_2))
    print("Line for number 4")
    print("y = {:.2f}x + {:.2f}".format(m_3, b_3))


def intersection(m1, b1, m2, b2):
    x = (b2 - b1) / (m1 - m2)
    y = m1 * x + b1
    return x,y

print("Intersection of lines 0 and 1")
inter01_X, inter01_Y = intersection(m_0, b_0, m_1, b_1)
inter02_X, inter02_Y = intersection(m_0, b_0, m_2, b_2)
inter03_X, inter03_Y = intersection(m_0, b_0, m_3, b_3)
inter12_X, inter12_Y = intersection(m_1, b_1, m_2, b_2)
inter13_X, inter13_Y = intersection(m_1, b_1, m_3, b_3)
inter23_X, inter23_Y = intersection(m_2, b_2, m_3, b_3)

if plotting:    
    plt.scatter(inter01_X, inter01_Y)
    plt.scatter(inter02_X, inter02_Y)
    plt.scatter(inter03_X, inter03_Y)
    plt.scatter(inter12_X, inter12_Y)
    plt.scatter(inter13_X, inter13_Y)
    plt.scatter(inter23_X, inter23_Y)

middlePointX = sum([inter01_X, inter02_X, inter03_X, inter12_X, inter13_X, inter23_X])/6
middlePointY = sum([inter01_Y, inter02_Y, inter03_Y, inter12_Y, inter13_Y, inter23_Y])/6

print("Middle point of the intersection points: {:.2f}, {:.2f}".format(middlePointX, middlePointY))
print(middlePointX, middlePointY)


if plotting:
    allYPoints = [0, 1, 2, 3, 4, 5, 7, 9, 12, 15, 19, 24, 30, 37, 46, 56, 68, 83, 101, 123, 149, 181, 219, 265, 321, 389, 471, 570, 689, 798, 963, 1214, 1465, 1768, 2133, 2574]
    allYPoints = [0, 1, 1, 1, 1, 1, 3, 6, 10, 17, 28, 46, 73, 116, 185, 305, 471, 732, 1157, 1829, 2891]      
    for i in allYPoints:
        plt.axhline(y=i, color='r', linestyle='-')


allGridPoints = [[2044, 56], [2040, 68], [2035, 83], [2028, 101], [2020, 123], [2011, 149], [2000, 181], [1986, 219], [1970, 265], [1950, 321], [1926, 389], [1896, 471], [1861, 570], [1819, 689], [1780, 798], [1721, 963], [1632, 1214], [1543, 1465], [1435, 1768], [1305, 2133], [1148, 2574], [2059, 56], [2046, 68], [2030, 83], [2011, 101], [1987, 123], [1959, 149], [1924, 181], [1883, 219], [1834, 265], [1773, 321], [1700, 389], [1611, 471], [1504, 570], [1376, 689], [1258, 798], [1080, 963], [809, 1214], [538, 1465], [210, 1768], [-183, 2133], [-659, 2574], [2077, 56], [2055, 68], [2028, 83], [1995, 101], [1956, 123], [1909, 149], [1851, 181], [1782, 219], [1699, 265], [1598, 321], [1475, 389], [1327, 471], [1148, 570], [933, 689], [736, 798], [438, 963], [-14, 1214], [-468, 1465], [-1015, 1768], [-1674, 2133], [-2471, 2574], [2094, 56], [2064, 68], [2026, 83], [1980, 101], [1924, 123], [1859, 149], [1778, 181], [1681, 219], [1565, 265], [1423, 321], [1251, 389], [1043, 471], [792, 570], [491, 689], [214, 798], [-203, 963], [-838, 1214], [-1474, 1465], [-2242, 1768], [-3167, 2133], [-4284, 2574], [2112, 56], [2073, 68], [2024, 83], [1965, 101], [1894, 123], [1809, 149], [1704, 181], [1581, 219], [1431, 265], [1248, 321], [1026, 389], [759, 471], [436, 570], [48, 689], [-306, 798], [-844, 963], [-1663, 1214], [-2481, 1465], [-3469, 1768], [-4659, 2133], [-6097, 2574], [2063, 56], [2067, 68], [2072, 83], [2079, 101], [2086, 123], [2095, 149], [2106, 181], [2119, 219], [2135, 265], [2154, 321], [2177, 389], [2205, 471], [2239, 570], [2279, 689], [2316, 798], [2373, 963], [2458, 1214], [2544, 1465], [2648, 1768], [2772, 2133], [2923, 2574], [2099, 56], [2111, 68], [2127, 83], [2145, 101], [2167, 123], [2194, 149], [2226, 181], [2265, 219], [2312, 265], [2369, 321], [2438, 389], [2522, 471], [2622, 570], [2744, 689], [2855, 798], [3023, 963], [3278, 1214], [3534, 1465], [3842, 1768], [4214, 2133], [4663, 2574], [2134, 56], [2155, 68], [2180, 83], [2211, 101], [2248, 123], [2292, 149], [2346, 181], [2411, 219], [2489, 265], [2584, 321], [2699, 389], [2838, 471], [3006, 570], [3208, 689], [3393, 798], [3672, 963], [4098, 1214], [4524, 1465], [5038, 1768], [5656, 2133], [6404, 2574], [2170, 56], [2198, 68], [2234, 83], [2276, 101], [2329, 123], [2390, 149], [2466, 181], [2557, 219], [2666, 265], [2799, 321], [2960, 389], [3155, 471], [3390, 570], [3672, 689], [3931, 798], [4322, 963], [4918, 1214], [5514, 1465], [6233, 1768], [7099, 2133], [8146, 2574], [2205, 56], [2242, 68], [2287, 83], [2342, 101], [2409, 123], [2489, 149], [2586, 181], [2702, 219], [2843, 265], [3013, 321], [3221, 389], [3471, 471], [3773, 570], [4136, 689], [4469, 798], [4972, 963], [5738, 1214], [6504, 1465], [7428, 1768], [8542, 2133], [9887, 2574]]
allNewGridPoints = [[2082, 0], [2082, 1], [2082, 1], [2082, 1], [2082, 1], [2082, 1], [2081, 3], [2080, 6], [2078, 10], [2076, 17], [2071, 28], [2064, 46], [2054, 73], [2037, 116], [2010, 185], [1963, 305], [1899, 471], [1797, 732], [1631, 1157], [1369, 1829], [955, 2891], [2075, 0], [2074, 1], [2074, 1], [2074, 1], [2074, 1], [2074, 1], [2072, 3], [2069, 6], [2064, 10], [2057, 17], [2045, 28], [2026, 46], [1998, 73], [1952, 116], [1879, 185], [1753, 305], [1577, 471], [1301, 732], [852, 1157], [141, 1829], [-981, 2891], [2069, 0], [2067, 1], [2067, 1], [2067, 1], [2067, 1], [2067, 1], [2064, 3], [2058, 6], [2052, 10], [2039, 17], [2020, 28], [1989, 46], [1943, 73], [1869, 116], [1749, 185], [1542, 305], [1256, 471], [805, 732], [72, 1157], [-1087, 1829], [-2920, 2891], [2063, 0], [2060, 1], [2060, 1], [2060, 1], [2060, 1], [2060, 1], [2056, 3], [2048, 6], [2039, 10], [2022, 17], [1996, 28], [1953, 46], [1888, 73], [1785, 116], [1620, 185], [1332, 305], [935, 471], [310, 732], [-707, 1157], [-2317, 1829], [-4860, 2891], [2057, 0], [2054, 1], [2054, 1], [2054, 1], [2054, 1], [2054, 1], [2048, 3], [2038, 6], [2026, 10], [2005, 17], [1971, 28], [1916, 46], [1833, 73], [1701, 116], [1490, 185], [1122, 305], [614, 471], [-185, 732], [-1487, 1157], [-3546, 1829], [-6800, 2891], [2086, 0], [2086, 1], [2086, 1], [2086, 1], [2086, 1], [2086, 1], [2086, 3], [2087, 6], [2089, 10], [2091, 17], [2094, 28], [2099, 46], [2107, 73], [2120, 116], [2140, 185], [2176, 305], [2225, 471], [2302, 732], [2428, 1157], [2627, 1829], [2941, 2891], [2098, 0], [2099, 1], [2099, 1], [2099, 1], [2099, 1], [2099, 1], [2101, 3], [2103, 6], [2107, 10], [2114, 17], [2125, 28], [2143, 46], [2169, 73], [2212, 116], [2279, 185], [2397, 305], [2560, 471], [2817, 732], [3234, 1157], [3894, 1829], [4937, 2891], [2109, 0], [2110, 1], [2110, 1], [2110, 1], [2110, 1], [2110, 1], [2114, 3], [2119, 6], [2125, 10], [2137, 17], [2155, 28], [2186, 46], [2231, 73], [2302, 116], [2418, 185], [2618, 305], [2895, 471], [3331, 732], [4040, 1157], [5162, 1829], [6934, 2891], [2120, 0], [2122, 1], [2122, 1], [2122, 1], [2122, 1], [2122, 1], [2127, 3], [2134, 6], [2143, 10], [2160, 17], [2186, 28], [2228, 46], [2292, 73], [2393, 116], [2556, 185], [2838, 305], [3230, 471], [3845, 732], [4846, 1157], [6430, 1829], [8932, 2891], [2131, 0], [2134, 1], [2134, 1], [2134, 1], [2134, 1], [2134, 1], [2140, 3], [2149, 6], [2161, 10], [2183, 17], [2216, 28], [2271, 46], [2353, 73], [2484, 116], [2694, 185], [3059, 305], [3564, 471], [4359, 732], [5652, 1157], [7698, 1829], [10930, 2891]]
allNewGridPoints = [[2082, 0], [2082, 1], [2082, 1], [2082, 1], [2082, 1], [2082, 1], [2081, 3], [2080, 6], [2078, 10], [2076, 17], [2071, 28], [2064, 46], [2054, 73], [2037, 116], [2010, 185], [1963, 305], [1899, 471], [1797, 732], [1631, 1157], [1369, 1829], [955, 2891], [2075, 0], [2074, 1], [2074, 1], [2074, 1], [2074, 1], [2074, 1], [2072, 3], [2069, 6], [2064, 10], [2057, 17], [2045, 28], [2026, 46], [1998, 73], [1952, 116], [1879, 185], [1753, 305], [1577, 471], [1301, 732], [852, 1157], [141, 1829], [-981, 2891], [2069, 0], [2067, 1], [2067, 1], [2067, 1], [2067, 1], [2067, 1], [2064, 3], [2058, 6], [2052, 10], [2039, 17], [2020, 28], [1989, 46], [1943, 73], [1869, 116], [1749, 185], [1542, 305], [1256, 471], [805, 732], [72, 1157], [-1087, 1829], [-2920, 2891], [2063, 0], [2060, 1], [2060, 1], [2060, 1], [2060, 1], [2060, 1], [2056, 3], [2048, 6], [2039, 10], [2022, 17], [1996, 28], [1953, 46], [1888, 73], [1785, 116], [1620, 185], [1332, 305], [935, 471], [310, 732], [-707, 1157], [-2317, 1829], [-4860, 2891], [2057, 0], [2054, 1], [2054, 1], [2054, 1], [2054, 1], [2054, 1], [2048, 3], [2038, 6], [2026, 10], [2005, 17], [1971, 28], [1916, 46], [1833, 73], [1701, 116], [1490, 185], [1122, 305], [614, 471], [-185, 732], [-1487, 1157], [-3546, 1829], [-6800, 2891]]
for i in allNewGridPoints:
    plt.scatter(i[0], i[1], marker='x', color='orange')
    txtName = "(" + str(i[0]) + "," + str(i[1]) + ")"
    plt.annotate(txtName, xy=i, textcoords='offset points', xytext=(0, 10), ha='center', fontsize=8)

#plt.scatter(363, 1525, color='black', marker='x')
if plotting:
    plt.plot(middlePointX, middlePointY, "*")
    plt.show()

totalPicArray = []

sourceMatsArrayOne = ((image_f26_a20_h305[12][1],image_f26_a20_h305[12][2]),
                       (image_f26_a20_h305[15][1],image_f26_a20_h305[15][2]),
                       (image_f26_a20_h305[3][1],image_f26_a20_h305[3][2]),
                       (image_f26_a20_h305[0][1],image_f26_a20_h305[0][2])) # CORRECT FINALLY
"""
Looks like no difference 
sourceMatsArrayOne = ((image_f26_a20_h305[15][1],image_f26_a20_h305[15][2]),
                       (image_f26_a20_h305[12][1],image_f26_a20_h305[12][2]),
                       (image_f26_a20_h305[0][1],image_f26_a20_h305[0][2]),
                       (image_f26_a20_h305[3][1],image_f26_a20_h305[3][2])) #  yes
"""
print(sourceMatsArrayOne)

"""
#pickedSurface = np.array(sourceMatsArrayOne)
#totalImage = np.array(((0,0),(height,0),(height,width),(0,width)))
totalImage = np.array(((0,0),(width,0),(width,height),(0,height)))
#totalImage = np.array(((0,0),(width,0),(width,width),(0,width)))
#pickedSurface = np.array(((0,0),(width,0),(width,height),(0,height)))


newWidth = width+5000
newHeight = height+5000
totalImage2 = np.array(((0,0),(10755,0),(10755,8640),(0,8640)))
aux,b = cv2.findHomography(totalImage,totalImage2)
print("-"*20)
print(aux)
print("-"*20)
image9 = cv2.warpPerspective(image,aux,(newWidth,newHeight))

#dst = cv.warpPerspective(src, M, dsize[, dst[, flags[, borderMode[, borderValue]]]] )
 # src: input image
# M: Transformation matrix
# dsize: size of the output image
# flags: interpolation method to be used
print(image.shape)
print(image9.shape)


plt.imshow(image9)
plt.title("Distortion Correction")
plt.show()
"""
print("--- %s seconds ---" % (time.time() - start_time))
